<?php

namespace Omnipay\Pagonline\Message;
require_once(dirname(__FILE__) . "/../Igfs/init/IgfsCgInit.php");
require_once(dirname(__FILE__) . "/../Igfs/init/IgfsCgVerify.php");
use Omnipay\Common\Message\AbstractRequest as BaseAbstractRequest;
use Omnipay\Common\Exception\InvalidRequestException;

/**
 * Abstract Request
 */
abstract class AbstractRequest extends BaseAbstractRequest
{
	protected $liveEndpoint = 'https://pagamenti.unicredit.it/UNI_CG_SERVICES/services';
	protected $testEndpoint = 'https://testeps.netswgroup.it/UNI_CG_SERVICES/services';
	protected $_defLocale = 'en';
	protected $IgfsClient = null ;
	
	protected $_langMap = array(
			'en' => 'EN',
			'it' => 'IT',
	);
	protected $_error = null;
	protected $_message = null;
	/**
	 * @return array
	 */
	public function getDefaultParameters()
	{
		return array(
			'timeout' => 3000,
			'trType' => 'PURCHASE',
		);
	}

	public function getLanguage(){
		return (isset($this->_langMap[$this->getLocale()])) ? $this->_langMap[$this->getLocale()] : $this->_langMap[$this->_defLocale];
	}
	/**
	 * Get the endpoint where the request should be made.
	 *
	 * @return string the URL of the endpoint
	 */
	public function getEndpoint()
	{
		return $this->getTestMode() ? $this->testEndpoint : $this->liveEndpoint;
	}

	public function getTid()
	{
		return $this->getParameter('tid');
	}

	public function setTid($value)
	{
		return $this->setParameter('tid', $value);
	}
	
	public function setSecretKey($value)
	{
		return $this->setParameter('kSig', $value);
	}
	public function getSecretKey()
	{
		return $this->getParameter('kSig');
	}
	public function setAmount($value)
	{
		return $this->setParameter('amount', $value);
	}
	public function getAmount()
	{
		return $this->getParameter('amount');
	}
	public function setCurrency($value)
	{
		return $this->setParameter('currencyCode', $value);
	}
	public function getCurrency()
	{
		return $this->getParameter('currencyCode');
	}
	
	
	/**
	 * Get the transaction ID.
	 *
	 * The transaction ID is the identifier generated by the merchant website.
	 *
	 * @return string
	 */
	public function getTransactionId()
	{
		return $this->getParameter('shopID');
	}
	
	/**
	 * Sets the transaction ID.
	 *
	 * @param string $value
	 * @return $this
	 */
	public function setTransactionId($value)
	{
		return $this->setParameter('shopID', $value);
	}
	
	public function setEmail($value)
	{
		return $this->setParameter('shopUserRef', $value);
	}
	public function getEmail()
	{
		return $this->getParameter('shopUserRef');
	}
	
	public function setFirstName($value)
	{
		return $this->setParameter('shopUserName', $value);
	}
	public function getFirstName()
	{
		return $this->getParameter('shopUserName');
	}
	
	public function setLastName($value)
	{
		return $this->setParameter('AccountName', $value);
	}
	public function getLastName()
	{
		return $this->getParameter('AccountName');
	}
	public function getFullName()
	{
		return $this->getFirstName() . " " . $this->getLastName();
	}
	
	public function setReturnUrl($value)
	{
		return $this->setParameter('notifyURL', $value);
	}
	public function getReturnUrl()
	{
		return $this->getParameter('notifyURL');
	}
	
	public function setCancelUrl($value)
	{
		return $this->setParameter('errorURL', $value);
	}
	public function getCancelUrl()
	{
		return $this->getParameter('errorURL');
	}
	
	public function setLocale($value)
	{
		return $this->setParameter('langID', $value);
	}
	public function getLocale()
	{
		return strtolower($this->getParameter('langID'));
	}
	
	public function setPostUrlS2s($value)
	{
		return $this->setParameter('urlpost', $value);
	}
	public function getPostUrlS2s()
	{
		return $this->getParameter('urlpost');
	}

	
	public function setCompleteRequest($value)
	{
		return $this->setParameter('complete_request', $value);
	}
	public function GetCompleteRequest($value)
	{
		return $this->getParameter('complete_request');
	}
	
	
	
	/**
	 * Get the transaction ID  of bank.
	 *
	 * The transaction ID is the identifier generated by the merchant website.
	 *
	 * @return string
	 */
	public function getPaymentTransactionId()
	{
		return $this->getParameter('transactionID');
	}
	
	/**
	 * Sets the transaction ID of bank.
	 *
	 * @param string $value
	 * @return $this
	 */
	public function setPaymentTransactionId($value)
	{
		return $this->setParameter('transactionID', $value);
	}
	
	
	public function getHttpRequest()
	{
		return $this->httpRequest;
	}
	
	
	public function setCard($value)
	{
		if(isset($value['email'])){
			$this->setEmail($value['email']);
		}
		if(isset($value['firstName'])){
			$this->setFirstName($value['firstName']);
		}
		if(isset($value['lastName'])){
			$this->setLastName($value['lastName']);
		}
		return $this->setParameter('card', $value);
	}
	public function getCard()
	{
		return $this->getParameter('card');
	}

	/**
	 * Get HTTP Method.
	 *
	 * This is nearly always POST but can be over-ridden in sub classes.
	 *
	 * @return string the HTTP method
	 */
	public function getHttpMethod()
	{
		return 'POST';
	}
	
	/**
	 * {@inheritdoc}
	 */
	public function sendData($data)
	{
		$response = $this->httpClient->request(
				$this->getHttpMethod(),
				$this->getEndpoint(),
				$this->getHeaders(),
				json_encode($data)
				);
		
		$payload =  json_decode($response->getBody()->getContents(), true);
		
		return $this->createResponse($payload);
	}
	
	public function createResponse($data)
	{
		return $this->response = new Response($this, $data);
	}
	
	public function getHeaders()
	{
		return [];
	}
	
	public function getClient(){
		return $this->IgfsClient;
	}
	public function getError(){
		return $this->_error;
	}
	public function getMessage(){
		return $this->_message;
	}

}